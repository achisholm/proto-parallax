//******************************************************************************
// Mixins.
//
// 
//******************************************************************************
@use 'sass:math';

@mixin clearfix {
    // clearfix hack, a way to contain floats without resorting to using presentational markup
    // http://nicolasgallagher.com/micro-clearfix-hack/
    *zoom: 1;

    &:before,
    &:after {
        display: table;
        content: '';
        line-height: 0;
    }

    &:after {
        clear: both;
    }
}

@mixin fade {
    // An animated fading transition
    transition: all 0.1s ease-in-out;
}

@mixin icon {
    // iconfont icon base styles
    font-family: 'iconfont';
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

//==============================================================================
// Extendable classes.
//==============================================================================
%mobile-divider {
    // An extend only selector for dividing panels with a grey border on mobile view

    @media screen and (max-width:799px) {
        border-bottom: 18px solid grey;
    }
}

%text-truncated {
    // Truncated text.
    // Usage: "@extend %text-truncated;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

//==============================================================================
// Scrollbar.
//
// Customises the native browser scrollbar.
//
// Usage: @include scrollbar(10px, 5px);
//==============================================================================
@mixin scrollbar($size: 10px, $border-radius: 0) {
    
    &::-webkit-scrollbar {
        // ::-webkit-scrollbar
        // The background of the scrollbar, covered by the other elements.
        height: $size;
        width: $size;

        &-button {
            // ::-webkit-scrollbar-button
            // Directional buttons on the scrollbar.
            height: 0;
            width: 0;
        }

        &-corner {
            // ::-webkit-scrollbar-corner
            // Bottom corner of the scrollable element, where two
            // scrollbars meet.
            background: transparent;
        }

        &-thumb {
            // ::-webkit-scrollbar-thumb
            // Draggable scrolling handle that resizes depending on the size
            // of the scrollable area.
            background-color: rgba(0, 0, 0, 0.2);
            box-shadow: inset 1px 1px 0 rgba(0, 0, 0, 0.1), 
                        inset 0 -1px 0 rgba(0, 0, 0, 0.07);
            min-height: 30px;
            border-radius: $border-radius;
            margin: 2px;

            &:hover {
                // ::-webkit-scrollbar-thumb:hover
                background-color: rgba(black, 0.4);
                box-shadow: inset 1px 1px 1px rgba(black, 0.25);
            }

            &:active {
                // ::-webkit-scrollbar-thumb:active
                background-color: rgba(black, 0.5);
                box-shadow: inset 1px 1px 3px rgba(black, 0.35);
            }
        }
        
        &-track {
            // ::-webkit-scrollbar-track
            // The track (progress bar) of the scrollbar.
            background-color: rgba(black, 0.025);
            box-shadow: inset 1px 0 0 rgba(black, 0.05);
            
            &:hover {
                // ::-webkit-scrollbar-track:hover
                background-color: rgba(black, 0.05);
                box-shadow: inset 1px 0 0 rgba(black, 0.1);
            }

            &:active {
                // ::-webkit-scrollbar-track:active
                background-color: rgba(black, 0.05);
                box-shadow: inset 1px 0 0 rgba(black, 0.14), 
                            inset -1px 0 0 rgba(black, 0.07);
            }
        }
    }
}


//==============================================================================
// CSS columns.
//==============================================================================
@mixin column-count($value) {
    // Usage: '@include column-count'
    -webkit-column-count: $value;
    -moz-column-count:    $value;
    column-count:         $value;
}

@mixin column-gap($value) {
    // Usage: '@include column-gap(10px)'
    -webkit-column-gap: $value;
    -moz-column-gap:    $value;
    column-gap:         $value;
}

@mixin column-rule($value) {
    // Usage: '@include column-rule(2px solid grey)'
    -webkit-column-rule: $value;
    -moz-column-rule:    $value;
    column-rule:         $value;
}

@mixin break-inside($value) {
    // Usage: '@include break-inside(avoid)'
    -webkit-column-break-inside: $value;
    page-break-inside:           $value;
    break-inside:                $value;
}

@mixin break-after($value) {
    // Usage: '@include break-inside(avoid)'
    -webkit-column-break-after: $value;
    page-break-after:           $value;
    break-after:                $value;
}

//==============================================================================
// Line clamp.
//==============================================================================
@mixin line-clamp($value){
    // Usage: '@include line-clamp(3)'
    display: -webkit-box;
    -webkit-line-clamp: $value;
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
    overflow: hidden;
}

//==============================================================================
// User-select.
//
// Vendor-prefixes for 
// https://www.w3.org/TR/css-ui-4/#propdef-user-select
//==============================================================================
@mixin user-select($value){
    // Usage: '@include user-select(auto|text|none|contain|all)'
    -webkit-user-select: $value;
    -moz-user-select: $value;
    -ms-user-select: $value;
    user-select: $value;
}

//==============================================================================
// Placeholder attribute.
//
// Vendor-prefixes for
// https://www.w3.org/TR/2011/WD-html5-20110525/common-input-element-attributes.html#the-placeholder-attribute
//==============================================================================
@mixin placeholder($value){
    // Usage: '@include placeholder($color)'

    &::input-placeholder {
        color: $value;
    }

    &::-webkit-input-placeholder {
        color: $value;
    }

    &:-moz-placeholder { // Firefox 18
        color: $value;
    }

    &::-moz-placeholder { // Firefox 19+
        color: $value;
    }

    &:-ms-input-placeholder {
        color: $value;
    }
}

//==============================================================================
// Appearance property.
//
// Vendor-prefixes for 
// https://drafts.csswg.org/css-ui-4/#appearance-switching
//==============================================================================
@mixin appearance($value){
    // Usage: '@include appearance(auto|none)'
    -webkit-appearance: $value;
    -moz-appearance: $value;
    appearance: $value;
}

//==============================================================================
// Flexbox.
//
// Derived from https://github.com/mastastealth/sass-flex-mixin
//==============================================================================

//------------------------------------------------------------------------------
// Flexbox containers.
//-----
@mixin flexbox {
    // Usage: '@include flexbox'
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin inline-flex {
    //
    // Usage: '@include flexbox'
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

//------------------------------------------------------------------------------
// Flexbox Align Content.
//-----
@mixin align-content($value: stretch) {
    // Usage: '@include flex-align-content(center)'
    @if $value == center {
        -ms-flex-line-pack: center;
    }
    @else if $value == flex-start {
        -ms-flex-line-pack: start;
    }
    @else if $value == flex-end {
        -ms-flex-line-pack: end;
    }
    @else if $value == space-between {
        -ms-flex-line-pack: justify;
    }
    @else {
        -ms-flex-line-pack: $value;
    }
    -webkit-align-content:  $value;
    -moz-align-content:     $value;
    align-content:          $value;
}

//------------------------------------------------------------------------------
// Flexbox Align Items.
//-----
@mixin align-items($value: stretch) {
    // Usage: '@include flex-align-items(flex-start)'
    @if $value == flex-start {
	-webkit-box-align: start;
	-ms-flex-align:    start;
    } @else if $value == flex-end {
	-webkit-box-align: end;
	-ms-flex-align:    end;
    } @else {
	-webkit-box-align: $value;
	-ms-flex-align:    $value;
    }
    -webkit-align-items:   $value;
    -moz-align-items:      $value;
    align-items:           $value;
}

//------------------------------------------------------------------------------
// Flexbox Align Self.
//-----
@mixin align-self($value: stretch) {
    // Usage: '@include flex-align-self(baseline)'
    @if $value == flex-start {
	-ms-flex-item-align: start;
    } @else if $value == flex-end {
	-ms-flex-item-align: end;
    } @else {
	-ms-flex-item-align: $value;
    }
    -webkit-align-self:      $value;
    -moz-align-self:         $value;
    align-self:              $value;
}

//------------------------------------------------------------------------------
// Flex Basis.
//-----
@mixin flex-basis($value: auto) {
    // Usage: '@include flex-basis(80px)'
    -webkit-flex-basis:      $value;
    -moz-flex-basis:         $value;
    -ms-flex-preferred-size: $value;
    flex-basis:              $value;
}

//------------------------------------------------------------------------------
// Flex Direction.
//-----
@mixin flex-direction($value: column) {
    // Usage: '@include flex-direction(column)'
    -webkit-flex-direction: $value;
    -ms-flex-direction:     $value;
    flex-direction:         $value;
}

//------------------------------------------------------------------------------
// Flex Flow.
//-----
@mixin flex-flow($value: (row nowrap)) {
    // Usage: '@include flex-flow(row-reverse wrap)'
    -webkit-flex-flow: $value;
    -moz-flex-flow:    $value;
    -ms-flex-flow:     $value;
    flex-flow:         $value;
}

//------------------------------------------------------------------------------
// Flex Grow.
//-----
@mixin flex-grow($value: 0) {
    // Usage: '@include flex-grow(2)'
    -webkit-box-flex:  $value;
    -webkit-flex-grow: $value;
    -moz-flex-grow:    $value;
    -ms-flex-positive: $value;
    flex-grow:         $value;
}

//------------------------------------------------------------------------------
// Flex Justify Content.
//-----
@mixin justify-content($value: flex-start) {
    // Usage: '@include flex-justify-content(space-between)'
    @if $value == flex-start {
        -webkit-box-pack:    start;
        -ms-flex-pack:       start;
    }
    @else if $value == flex-end {
        -webkit-box-pack:    end;
        -ms-flex-pack:       end;
    }
    @else if $value == space-between {
        -webkit-box-pack:    justify;
        -ms-flex-pack:       justify;
    }
    @else if $value == space-around {
        -ms-flex-pack:       distribute;
    }
    @else {
        -webkit-box-pack:    $value;
        -ms-flex-pack:       $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content:    $value;
    justify-content:         $value;
}

//------------------------------------------------------------------------------
// Flex Order.
//-----
@mixin order($value: 0) {
    // Usage: 'order(1)'
    -webkit-box-ordinal-group: $value + 1;
    -webkit-order:             $value;
    -moz-order:                $value;
    -ms-flex-order:            $value;
    order:                     $value;
}

//------------------------------------------------------------------------------
// Flex Shrink.
//-----
@mixin flex-shrink($value: 1) {
    // Usage: '@include flex-shrink(3)'
    -webkit-flex-shrink: $value;
    -moz-flex-shrink:    $value;
    -ms-flex-negative:   $value;
    flex-shrink:         $value;
}

//------------------------------------------------------------------------------
// Flex Wrap.
//-----
@mixin flex-wrap($value: nowrap) {
    // Usage: '@include flex-wrap(wrap-reverse)'
    -webkit-flex-wrap: $value;
    -moz-flex-wrap:    $value;
    -ms-flex-wrap:     $value;
    flex-wrap:         $value;
}

//------------------------------------------------------------------------------
// Flexbox Flex.
//-----
@mixin flex ($flex-grow: 0, $flex-shrink: 1, $flex-basis: auto) {
    // Usage; '@include flex(1 1 25%)'
    -webkit-flex:  $flex-grow $flex-shrink $flex-basis;
    -moz-box-flex: $flex-grow $flex-shrink $flex-basis;
    -moz-flex:     $flex-grow $flex-shrink $flex-basis;
    -ms-flex:      $flex-grow $flex-shrink $flex-basis;
    flex:          $flex-grow $flex-shrink $flex-basis;
}

//==============================================================================
// Grid system.
//==============================================================================
$grid-columns:      12;
$grid-gutter-width: 20px;

@mixin container($gutter: $grid-gutter-width) {
    // Centered container element
    margin-right: auto;
    margin-left: auto;
    padding-left:  math.div($gutter, 2);
    padding-right: math.div($gutter, 2);
    @include clearfix();
}

@mixin row($gutter: $grid-gutter-width) {
    // Creates a wrapper for a series of columns
    @include clearfix();
    margin-left:  math.div($gutter, -2);
    margin-right: math.div($gutter, -2);
}

@mixin column($gutter: $grid-gutter-width) {
    // Make the element grid-ready (applying everything but the width)
    position: relative;
    float: left;
    min-height: 1px;
    padding-left:  math.div($gutter, 2);
    padding-right: math.div($gutter, 2);
}

@mixin column-span($columns) {
    // Set a width (to be used in or out of media queries)
    width: percentage(math.div($columns, $grid-columns));
}

@mixin column-offset($columns) {
    // For offsetting, or changing the sort order
    margin-left: percentage(math.div($columns, $grid-columns));
}

@mixin column-push($columns) {
    // Offset right
    left: percentage(math.div($columns, $grid-columns));
}
@mixin column-pull($columns) {
    // Offset right
    right: percentage(math.div($columns, $grid-columns));
}
